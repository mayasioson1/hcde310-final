next_ten <- seq(21, 30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- paste(first_ten, next_ten)
all_numbers <- c(first_ten, next_ten)
print(all_numbers)
eleventh <- all_numbers[11]
some_numbers <- all_numbers[2:5]
even <- seq(2, 100, 2)
?all()
even <- seq(2, 100, 2)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
even %% 2 == 0
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1:3]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- c(phone_numbers <= 5)
less_than_five <- phone_numbers <= 5
filter <- phone_numbers <= 5
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
less_than_five <- phone_numbers <= 5
small <- c(phone_numbers[less_than_five])
large <- c(phone_numbers[!less_than_five])
phone_numbers[phone_numbers > 5] <- 5
phone_numbers[phone_numbers % 2 == 1] <- 0
phone_numbers[phone_numbers %% 2 == 1] <- 0
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- paste(words, "is the word of the day!")
words <- c("dog", "sky", "pencil", "chair", "book", "cat")
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- paste(words, "is the word of the day!")
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words[words > a & words < f]
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words[words < "f"]
# Create a vector `g_m_words` which are the elements in `words` that start with
# "g" through "m"
g_m_words <- words[words > "g" & words < "m"]
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c("dog", "sky", "pencil", "chair", "book", "cat", "hat")
# Create a vector `g_m_words` which are the elements in `words` that start with
# "g" through "m"
g_m_words <- words[words > "g" & words < "m"]
word_bin <- function(words, letter_1, letter_2) {
words[words > letter_1 & words < letter_2]
}
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, "e", "q")
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("cereal", "banana", "granola bar")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("soup", "chips")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$my_dinner <- c("chicken", "fruit", "pie")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$my_dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
# Create a vector `better_meals` that is all your meals, but with pizza!
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast = my_breakfast, my_lunch) = my_lunch
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast = my_breakfast, my_lunch = my_lunch)
source('C:/Users/msios/Desktop/INFO 201/book-exercises/chapter-08-exercises/exercise-1/exercise.R', echo=TRUE)
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["my_lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals["my_breakfast", "my_lunch"]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[c("my_breakfast", "my_lunch")]
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
num_items <- lapply(meals, length)
add_pizza <- function(meal) {
added_pizza <- c(meal, "pizza")
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- add_pizza(meals)
# Create a vector `better_meals` that is all your meals, but with pizza!
add_pizza(my_breakfast)
# Create a vector `better_meals` that is all your meals, but with pizza!
better_breakfast <- add_pizza(my_breakfast)
print(better_breakfast)
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- add_pizza(meals)
View(better_meals)
meals[[5]] <- NULL
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
?runif
# Create a *list* of 10 random numbers. Use the `runif()` function to make a
# vector of random numbers, then use `as.list()` to convert that to a list
random_numbers <- runif(10, 0, 30)
?as.list
random_numbers <- as.list(random_numbers)
random_numbers <- runif(10, 1, 30)
random_numbers <- as.list(random_numbers)
# Use `lapply()` to apply the `round()` function to each number, rounding it to
# the nearest 0.1 (one decimal place)
lapply(random_numbers, round, 0.1)
# Use `lapply()` to apply the `round()` function to each number, rounding it to
# the nearest 0.1 (one decimal place)
lapply(random_numbers, round, 2)
# Use `lapply()` to apply the `round()` function to each number, rounding it to
# the nearest 0.1 (one decimal place)
lapply(random_numbers, round, 1)
?strsplit
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
sentence <- strsplit(sentence, "")
sentence <- "cats are good pets, for they are clean and are not noisy."
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
sentence <- strsplit(sentence, "")
View(sentence)
# Extract the vector of letters from the resulting list
letters <- sentence[[1]]
?unique
count_occurrences <- function(letter, characters) {
letters <- characters = letter
length(letters)
}
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurrences("e", letters)
count_occurrences <- function(letter, characters) {
letters <- characters = letter
length(letters)
}
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurrences("e", sentence_letters)
expensive <- prices > 12.00
prices <- c(4.50, 12.00, 25.00, 72.00, 36.00)
expensive <- prices > 12.00
count_occurrences <- function(letter, characters) {
match <- characters == letter
length(characters[match])
}
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurrences("e", sentence_letters)
source('C:/Users/msios/Desktop/INFO 201/book-exercises/chapter-08-exercises/exercise-2/exercise.R', echo=TRUE)
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurrences("e", sentence_letters)
source('C:/Users/msios/Desktop/INFO 201/book-exercises/chapter-08-exercises/exercise-2/exercise.R', echo=TRUE)
source('C:/Users/msios/Desktop/INFO 201/book-exercises/chapter-08-exercises/exercise-2/exercise.R', echo=TRUE)
?sapply
source('C:/Users/msios/Desktop/INFO 201/book-exercises/chapter-08-exercises/exercise-2/exercise.R', echo=TRUE)
source('C:/Users/msios/Desktop/INFO 201/book-exercises/chapter-08-exercises/exercise-2/exercise.R', echo=TRUE)
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
sapply(sentence_letters, count_occurrences, unique_letters)
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
letter_frequencies <- sapply(sentence_letters, count_occurrences, unique_letters)
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
letter_frequencies <- c(sapply(sentence_letters, count_occurrences, unique_letters))
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurrences("e", sentence_letters)
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
letter_frequencies <- sapply(sentence_letters, count_occurrences)
source('C:/Users/msios/Desktop/INFO 201/book-exercises/chapter-08-exercises/exercise-2/exercise.R', echo=TRUE)
source('C:/Users/msios/Desktop/INFO 201/book-exercises/chapter-08-exercises/exercise-2/exercise.R', echo=TRUE)
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
letter_frequencies <- sapply(unique_letters, count_occurrences, sentence_letters)
# Print the resulting list of frequencies
print(letter_frequencies)
source('C:/Users/msios/Desktop/INFO 201/a2-core-skills-mayasioson1/assignment.R', echo=TRUE)
library"stringr"
library("stringr")
books <- c("Nisei Daughter", "Digital Fortress", "Into Thin Air", "Norwegian Wood",
"Ghost in the Wires", "The Da Vinci Code")
top_three_books <- books[1:3]
print(top_three_books)
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
remove_book <- function(book_titles, index) {
books[-index]
}
books_without_four <- remove_book(books, 4)
books_without_four <- remove_book(books, 4)
print(books_without_four)
long_titles <- books[length(books) > 15]
print(long_titles)
?nchar
long_titles <- books[nchar(books) > 15]
print(long_titles)
numbers <- c(1:201)
squared_numbers <- numbers ^ 2
?mean
squared_mean <- mean(squared_numbers)
squared_median <- squared_numbers[length(squared_numbers) / 2]
length(squared_numbers)
length(squared_numbers)/2
?median
squared_median <- median(squared_numbers)
squares <- numbers[sqrt(numbers) == numbers]
squares <- numbers[sqrt(numbers) = numbers]
squares <- numbers[round(sqrt(numbers)) == numbers]
print(squares)
?round
squares <- numbers[round(sqrt(numbers)) == numbers
squares <- numbers[round(sqrt(numbers)) == numbers]
squares <- numbers[round(sqrt(numbers)) == sqrt(numbers)]
print(squares)
?as.Date
spring_break <- as.Date("2019-03-16")
?example
example(as.Date)
?as.Date
spring_break <- as.Date("16march2019")
spring_break <- as.Date("16mar2019")
spring_break <- as.Date("2019-03-16")
?Sys.Date
days_to_break <- spring_break - today
spring_break <- as.Date("2019-03-16")
today <- Sys.Date()
days_to_break <- spring_break - today
print(days_to_break)
?format
parent_bday <- format(birthdays[["dad"]], "%m/%d")
birthdays <- list(
dad = as.Date("1972-12-04"),
mom = as.Date("1966-08-29"),
karina = as.Date("1996-09-11")
)
parent_bday <- format(birthdays[["dad"]], "%m/%d")
print(parent_bday)
print(spring_break)
birthdays_2019 <- lapply(birthdays, format(birthdays, "%m/%d/2019")
birthdays_2019 <- lapply(birthdays, format(birthdays, "%m/%d/2019"))
birthdays_2019 <- lapply(birthdays, format(birthdays, "%m/%d"))
birthdays_2019 <- lapply(birthdays, format, "%m/%d")
birthdays_2019 <- lapply(birthdays, format, "%m/%d/19")
print(date_has_passed(as.Date("2019-01-23")))
date_has_passed <- function(date) {
date - Sys.Date() < 0
}
print(date_has_passed(as.Date("2019-01-23")))
make_birthday_announcement("Maya", as.Date("2019-04-05"))
make_birthday_announcement <- function(name, date) {
# "name's birthday is in n days"
# should still work if day has already passed for this year
if (date_has_passed(date)) {
days_until_bday <- date - Sys.Date() + 364
} else {
days_until_bday <- date - Sys.Date()
}
paste(name, "'s birthday is in", days_until_bday,days)
}
make_birthday_announcement("Maya", as.Date("2019-04-05"))
make_birthday_announcement <- function(name, date) {
# "name's birthday is in n days"
# should still work if day has already passed for this year
if (date_has_passed(date)) {
days_until_bday <- date - Sys.Date() + 364
} else {
days_until_bday <- date - Sys.Date()
}
paste(name, "'s birthday is in", days_until_bday, "days")
}
make_birthday_announcement("Maya", as.Date("2019-04-05"))
make_birthday_announcement("Maya", as.Date("2019-01-03"))
?paste
make_birthday_announcement <- function(name, date) {
if (date_has_passed(date)) {
days_until_bday <- date - Sys.Date() + 364
} else {
days_until_bday <- date - Sys.Date()
}
paste(name, "'s birthday is in ", days_until_bday, " days", sep = "")
}
make_birthday_announcement("Maya", as.Date("2019-01-03"))
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement,
names(birthdays_2019), birthdays_2019)
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement,
names(birthdays_2019), birthdays_2019)
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement,
names(birthdays_2019))
birthdays_2019 <- as.Date(lapply(birthdays, format, "%m/%d/19"))
bday_announcements <- mapply(birthdays_2019, make_birthday_announcement,
names(birthdays_2019))
birthday_strings <- lapply(birthdays, format, "%m/%d/19")
birthdays_2019 <- lapply(birthday_strings, as.Date)
print(birthdays_2019)
print(birthdays_2019)
birthdays_2019 <- lapply(birthday_strings, as.Date)
birthday_strings <- lapply(birthdays, format, "2019-%m-%d")
birthdays_2019 <- lapply(birthday_strings, as.Date)
print(birthdays_2019)
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement,
names(birthdays_2019))
birthday_strings <- lapply(birthdays, format, "2019-%m-%d")
birthdays_2019 <- lapply(birthday_strings, as.Date)
print(birthdays_2019)
# Determines whether or not the given date has passed.
date_has_passed <- function(date) {
date - Sys.Date() < 0
}
print(date_has_passed(as.Date("2019-01-23")))
make_birthday_announcement <- function(name, date) {
if (date_has_passed(date)) {
days_until_bday <- date - Sys.Date() + 364
} else {
days_until_bday <- date - Sys.Date()
}
paste(name, "'s birthday is in ", days_until_bday, " days", sep = "")
}
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement,
names(birthdays_2019))
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement,
names(birthdays_2019), birthdays_2019)
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement,
brithdays_2019)
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement)
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement,
birthdays_2019)
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement,
names(birthdays_2019))
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement,
birthdays_2019)
birthdays_2019 <- lapply(birthday_strings, as.Date)
print(birthdays_2019)
birthday_strings <- lapply(birthdays, format, "2019-%m-%d")
birthdays_2019 <- lapply(birthday_strings, as.Date)
print(birthdays_2019)
# Determines whether or not the given date has passed.
date_has_passed <- function(date) {
date - Sys.Date() < 0
}
print(date_has_passed(as.Date("2019-01-23")))
make_birthday_announcement <- function(name, date) {
if (date_has_passed(date)) {
days_until_bday <- date - Sys.Date() + 364
} else {
days_until_bday <- date - Sys.Date()
}
paste(name, "'s birthday is in ", days_until_bday, " days", sep = "")
}
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement,
birthdays_2019)
birthdays <- list(
dad = as.Date("1972-12-04"),
mom = as.Date("1966-08-29"),
karina = as.Date("1996-09-11")
)
parent_bday <- format(birthdays[["dad"]], "%m/%d")
print(parent_bday)
birthday_strings <- lapply(birthdays, format, "2019-%m-%d")
birthdays_2019 <- lapply(birthday_strings, as.Date)
print(birthdays_2019)
# Determines whether or not the given date has passed.
date_has_passed <- function(date) {
date - Sys.Date() < 0
}
print(date_has_passed(as.Date("2019-01-23")))
make_birthday_announcement <- function(name, date) {
if (date_has_passed(date)) {
days_until_bday <- date - Sys.Date() + 364
} else {
days_until_bday <- date - Sys.Date()
}
paste(name, "'s birthday is in ", days_until_bday, " days", sep = "")
}
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement,
birthdays_2019)
bday_announcements <- mapply(birthdays_2019, make_birthday_announcement,
names(birthdays_2019), birthdays_2019)
birthdays <- list(
dad = as.Date("1972-12-04"),
mom = as.Date("1966-08-29"),
karina = as.Date("1996-09-11")
)
parent_bday <- format(birthdays[["dad"]], "%m/%d")
print(parent_bday)
birthday_strings <- lapply(birthdays, format, "2019-%m-%d")
birthdays_2019 <- lapply(birthday_strings, as.Date)
print(birthdays_2019)
# Determines whether or not the given date has passed.
date_has_passed <- function(date) {
date - Sys.Date() < 0
}
print(date_has_passed(as.Date("2019-01-23")))
make_birthday_announcement <- function(name, date) {
if (date_has_passed(date)) {
days_until_bday <- date - Sys.Date() + 364
} else {
days_until_bday <- date - Sys.Date()
}
paste(name, "'s birthday is in ", days_until_bday, " days", sep = "")
}
bday_announcements <- mapply(birthdays_2019, make_birthday_announcement,
names(birthdays_2019), birthdays_2019)
bday_announcements <- mapply(birthdays_2019, make_birthday_announcement,
names(birthdays_2019))
bday_announcements <- mapply(birthdays_2019, make_birthday_announcement,
birthdays_2019)
bday_announcements <- mapply(birthdays_2019, make_birthday_announcement)
?mapply
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019),
birthdays(2019))
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019),
birthdays_2019)
print(bday_announcements)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
View("vehicles")
View(vehicles)
shiny::runApp('C:/Users/msios/Desktop/INFO 201/info-201-world-data')
setwd("C:/Users/msios/Desktop/Documents/HCDE 310/hcde310-final")
filenames <- list.files(path = "/data", pattern = "*.csv")
print(filenames)
filenames <- list.files(path = "data/", pattern = "*.csv")
print(filenames)
fullpath <- file.path("data/", filenames)
print(fullpath)
fullpath <- file.path("data", filenames)
print(fullpath)
expenditures <- do.call("rbind", lapply(filenames, FUN=function(files) {read.csv(files)}))
head(expenditures)
expenditures <- do.call("rbind", lapply(fullpath, FUN=function(files) {read.csv(files)}))
head(expenditures)
View(expenditures)
write.csv(expenditures, "data/combined_expenditures", row.names = FALSE)
write.csv(expenditures, "data/combined_expenditures.csv", row.names = FALSE)
write.csv(expenditures, "data/combined_expenditures.csv", row.names = FALSE)
library(ggplot)
library(ggplot2)
ggplot(data = expenditures) +
geom_col(mapping = aes(x = candidate_name, y = amount, fill = support_oppose))
library(dplyr)
library(tidyr)
trump <- filter(expenditures, candidate_name == "trump")
View(trump)
ggplot(data = trump) +
geom_col(mapping = aes(x = support_oppose, y = amount, fill = committee_type))
ggplot(data = expenditures) +
geom_point(mapping = aes(x = candidate_name, y = amount, shape = committee_type))
ggplot(data = expenditures) +
geom_point(mapping = aes(x = candidate_name, y = amount))
ggplot(data = expenditures) +
geom_point(size = 3, mapping = aes(x = candidate_name, y = amount))
# combine all csv files into one dataframe
filenames <- list.files(path = "data/", pattern = "*.csv")
fullpath <- file.path("data", filenames)
contributions <- do.call("rbind", lapply(fullpath, FUN=function(files) {read.csv(files)}))
head(contributions)
write.csv(contributions, "data/combined_contribs.csv", row.names = FALSE)
View(contributions)
ggplot(data = contributions) +
geom_col(mapping = aes(x = candidate_name, y = amount, fill = entity_type))
ggplot(data = contributions) +
geom_point(mapping = aes(x = candidate_name, y = amount))
ggplot(data = contributions) +
geom_point(mapping = aes(x = candidate_name, y = amount)) +
scale_y_continuous(labels = scales::comma)
ggplot(data = contributions) +
geom_point(mapping = aes(x = candidate_name, y = amount), alpha = 0.05) +
scale_y_continuous(labels = scales::comma)
